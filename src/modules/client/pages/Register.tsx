import React, { useState } from "react";
import { Form, Input, Button, Card, Typography, message } from "antd";
import { UserAddOutlined, MailOutlined, LockOutlined, PhoneOutlined } from "@ant-design/icons";
import { useNavigate } from "react-router-dom";
import "../../../assets/styles/register.css";

const { Title, Text } = Typography;

const Register: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const onFinish = (values: {
    fullname: string;
    email: string;
    phone: string;
    password: string;
    confirm: string;
  }) => {
    setLoading(true);

    // Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n
    if (values.password !== values.confirm) {
      message.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
      setLoading(false);
      return;
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(values.email)) {
      message.error("Email kh√¥ng h·ª£p l·ªá!");
      setLoading(false);
      return;
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
    const phoneRegex = /^[0-9]{10,11}$/;
    if (!phoneRegex.test(values.phone)) {
      message.error("S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë!");
      setLoading(false);
      return;
    }

    // M√¥ ph·ªèng l∆∞u v√†o db.json (th·ª±c t·∫ø s·∫Ω g·ªçi API)
    setTimeout(() => {
      // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o localStorage ƒë·ªÉ m√¥ ph·ªèng
      const newUser = {
        _id: `user_${Date.now()}`,
        fullName: values.fullname,
        email: values.email,
        phone: values.phone,
        passwordHash: values.password, // Trong th·ª±c t·∫ø n√™n hash password
        role: "TENANT",
        createdAt: new Date().toISOString(),
      };

      // L·∫•y danh s√°ch ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ localStorage
      const existingUsers = JSON.parse(localStorage.getItem("users") || "[]");

      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const emailExists = existingUsers.some((user: any) => user.email === values.email);
      if (emailExists) {
        message.error("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!");
        setLoading(false);
        return;
      }

      // Th√™m ng∆∞·ªùi d√πng m·ªõi
      existingUsers.push(newUser);
      localStorage.setItem("users", JSON.stringify(existingUsers));

      setLoading(false);
      message.success(`ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√†o m·ª´ng, ${values.fullname}!`);

      // Chuy·ªÉn sang trang login sau 2 gi√¢y
      setTimeout(() => {
        navigate("/login");
      }, 2000);
    }, 1500);
  };

  return (
    <div className="register-container">
      {/* Logo g√≥c tr√™n tr√°i */}
      <div className="register-logo">
        <img
          src="https://cdn-icons-png.flaticon.com/512/893/893292.png"
          alt="Tro360 Logo"
          className="logo-icon"
        />
        <h2 className="logo-text">Tro360</h2>
      </div>

      {/* --- C·ªôt tr√°i --- */}
      <div className="register-left">
        <img
          src="https://cdn3d.iconscout.com/3d/premium/thumb/register-online-3d-illustration-download-in-png-blend-fbx-gltf-file-formats--signup-login-user-digital-form-web-pack-network-illustrations-3127482.png"
          alt="illustration"
          className="register-illustration"
        />
        <Title className="register-title" level={2}>
          B·∫Øt ƒë·∫ßu h√†nh tr√¨nh c√πng Tro360
        </Title>
        <Text className="register-subtitle">
          Qu·∫£n l√Ω ‚Äì K·∫øt n·ªëi ‚Äì T·ªëi ∆∞u ph√≤ng tr·ªç c·ªßa b·∫°n ‚ú®
        </Text>
      </div>

      {/* --- C·ªôt ph·∫£i --- */}
      <div className="register-right">
        <Card className="register-card">
          <div className="register-card-header">
            <Title level={2} className="register-heading">
              ƒêƒÉng k√Ω t√†i kho·∫£n
            </Title>
            <Text type="secondary">T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu üöÄ</Text>
          </div>

          <Form
            name="register-form"
            onFinish={onFinish}
            layout="vertical"
            autoComplete="off"
          >
            <Form.Item
              name="fullname"
              label="H·ªç v√† t√™n"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!" },
                { min: 2, message: "H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!" },
              ]}
            >
              <Input
                prefix={<UserAddOutlined style={{ color: "#3b82f6" }} />}
                placeholder="Nguy·ªÖn VƒÉn A"
                size="large"
                className="custom-input"
              />
            </Form.Item>

            <Form.Item
              name="email"
              label="Email"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
                { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
              ]}
            >
              <Input
                prefix={<MailOutlined style={{ color: "#3b82f6" }} />}
                placeholder="example@email.com"
                size="large"
                className="custom-input"
              />
            </Form.Item>

            <Form.Item
              name="phone"
              label="S·ªë ƒëi·ªán tho·∫°i"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
                {
                  pattern: /^[0-9]{10,11}$/,
                  message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë!",
                },
              ]}
            >
              <Input
                prefix={<PhoneOutlined style={{ color: "#3b82f6" }} />}
                placeholder="0123456789"
                size="large"
                className="custom-input"
              />
            </Form.Item>

            <Form.Item
              name="password"
              label="M·∫≠t kh·∫©u"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" },
                { min: 6, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!" },
              ]}
            >
              <Input.Password
                prefix={<LockOutlined style={{ color: "#3b82f6" }} />}
                placeholder="M·∫≠t kh·∫©u"
                size="large"
                className="custom-input"
              />
            </Form.Item>

            <Form.Item
              name="confirm"
              label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              dependencies={["password"]}
              rules={[
                { required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!" },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || getFieldValue("password") === value) {
                      return Promise.resolve();
                    }
                    return Promise.reject(
                      new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                    );
                  },
                }),
              ]}
            >
              <Input.Password
                prefix={<LockOutlined style={{ color: "#3b82f6" }} />}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                size="large"
                className="custom-input"
              />
            </Form.Item>

            <Form.Item>
              <Button
                type="primary"
                htmlType="submit"
                icon={<UserAddOutlined />}
                size="large"
                block
                loading={loading}
                className="register-btn btn-animated"
              >
                ƒêƒÉng k√Ω
              </Button>
            </Form.Item>
          </Form>

          <div style={{ textAlign: "center", marginTop: 10 }}>
            <Text>
              ƒê√£ c√≥ t√†i kho·∫£n?{" "}
              <Button
                type="link"
                onClick={() => navigate("/login")}
                style={{ padding: 0, fontWeight: 600 }}
              >
                ƒêƒÉng nh·∫≠p
              </Button>
            </Text>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default Register;
